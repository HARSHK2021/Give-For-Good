# NGINX config for Node.js + Socket.IO load balancing with sticky sessions

http {
  upstream backend_nodes {
    ip_hash;  # Enables session affinity based on client IP (sticky sessions)
    server 127.0.0.1:3000;
    server 127.0.0.1:3001;
    # Add additional Node servers as needed
  }

  server {
    listen 80;
    server_name example.com;  # Replace with your domain or public server IP

    # Proxy regular HTTP requests
    location / {
      proxy_pass http://backend_nodes;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_cache_bypass $http_upgrade;
    }

    # Proxy WebSocket handshake (Socket.IO)
    location /socket.io/ {
      proxy_pass http://backend_nodes/socket.io/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_cache_bypass $http_upgrade;
    }
  }
}
# Note: Ensure that your Node.js servers are configured to handle sticky sessions
# and that they are running on the specified ports (3000, 3001, etc.).
# Also, replace 'example.com' with your actual domain or public server IP.  